{
  "hash": "00c29bafb27ee9286eb9622a1b1899c9",
  "result": {
    "markdown": "---\ntitle: \"Datos espaciales en R\"\nauthor: \"Modificado de <https://r.geocompx.org/>\"\nformat: \n  html:\n    toc: true\n    df-print: kable\n---\n\n::: {.cell}\n\n:::\n\n\n\n# Datos espaciales en R \n\nPara esta fugaz intro a los datos espaciales en R, vamos a usar el libro\n\"Geocomputation with R\" que puede consultarse online aquí: \n<https://r.geocompx.org/>.\nVamos a ir siguiendo algunos ejemplos del libro y quien desee conocer más \ndetalles, puede consultarlos directamente allí o en los materiales que los \nautores mencionan. \n\nEn esta clase vamos a ver los conceptos básicos sobre los tipos fundamentales\nde datos geográficos: vector y raster. Veremos cómo están implementados en R, \ny ejemplificaremos algunas de las tareas más comunes que podemos realizar con \ncada uno de ellos.\n\nEl modelo de datos vectoriales representa el mundo mediante **puntos**, **líneas** y \n**polígonos**. Éstos tienen bordes discretos y bien definidos, lo que significa que \nlos conjuntos de datos vectoriales suelen ser muy precisos (aunque no \nnecesariamente exactos). \nEl modelo de datos ráster divide la superficie en **celdas** de tamaño constante,\ngeneralmente. \nLos datos ráster agregan características a una resolución determinada, lo que \nsignifica que son coherentes en el espacio y escalables.\n\n:::{.callout-note}\n¿Cuál utilizar? La respuesta depende probablemente de su ámbito de aplicación:\n\n- Los datos vectoriales tienden a dominar las ciencias sociales porque los\nasentamientos humanos tienden a tener fronteras discretas\n- Los datos rasterizados predominan en muchas ciencias medioambientales por su \ndependencia de los datos de teledetección.\n:::\n\n## Datos vectoriales\n\nEl modelo de datos vectoriales geográficos se basa en puntos situados dentro de un sistema de referencia de coordenadas (CRS). Los puntos pueden representar características autónomas (por ejemplo, la ubicación de una parada de autobús) o pueden unirse para formar geometrías más complejas, como líneas y polígonos.\n\n### Introducción a sf\n\nEl paquete **sf** nos permite trabajar con datos vectoriales en R. Simple Features \nes un estándar abierto desarrollado y aprobado por el Open Geospatial Consortium (OGC). Simple Features es un modelo de datos jerárquico que representa una amplia gama de tipos de geometría. sf puede representar todos los tipos de geometría vectorial habituales (sf no admite clases de datos ráster): puntos, líneas, polígonos y sus respectivas versiones \"multi\" (que agrupan características del mismo tipo en una única característica). sf también admite colecciones de geometría, que pueden contener múltiples tipos de geometría en un único objeto. \nSimple features es un modelo de datos ampliamente soportado que subyace en las estructuras de datos de muchas aplicaciones SIG, incluyendo QGIS y PostGIS. \n\nLa funcionalidad de sf está bien documentada en su sitio web <https://r-spatial.github.io/sf/>, que contiene 7 viñetas. Estas se pueden ver de la siguiente manera:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#vignette(package = \"sf\") # see which vignettes are available\n#vignette(\"sf1\")          # an introduction to the package\n```\n:::\n\n\n\n![](https://r.geocompx.org/figures/sf-classes.png)\n\nLos objetos feature simples en R se almacenan en un `data.frame` (tabla de datos), \ncon los datos geográficos ocupando una columna especial, normalmente llamada \n'geom' o 'geometry'. Utilizaremos el conjunto de datos world proporcionado por \n`spData` para mostrar qué son los objetos `sf` y cómo funcionan.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nclass(world)\nnames(world)\nhead(world)\n## [1] \"sf\"         \"tbl_df\"     \"tbl\"        \"data.frame\"\n##  [1] \"iso_a2\"    \"name_long\" \"continent\" \"region_un\" \"subregion\" \"type\"     \n##  [7] \"area_km2\"  \"pop\"       \"lifeExp\"   \"gdpPercap\" \"geom\"\n```\n\n::: {.cell-output-display}\n<div class=\"kable-table\">\n\n|iso_a2 |name_long      |continent     |region_un |subregion        |type              |    area_km2|       pop|  lifeExp| gdpPercap|geom                           |\n|:------|:--------------|:-------------|:---------|:----------------|:-----------------|-----------:|---------:|--------:|---------:|:------------------------------|\n|FJ     |Fiji           |Oceania       |Oceania   |Melanesia        |Sovereign country |    19289.97|    885806| 69.96000|  8222.254|MULTIPOLYGON (((-180 -16.55... |\n|TZ     |Tanzania       |Africa        |Africa    |Eastern Africa   |Sovereign country |   932745.79|  52234869| 64.16300|  2402.099|MULTIPOLYGON (((33.90371 -0... |\n|EH     |Western Sahara |Africa        |Africa    |Northern Africa  |Indeterminate     |    96270.60|        NA|       NA|        NA|MULTIPOLYGON (((-8.66559 27... |\n|CA     |Canada         |North America |Americas  |Northern America |Sovereign country | 10036042.98|  35535348| 81.95305| 43079.143|MULTIPOLYGON (((-132.71 54.... |\n|US     |United States  |North America |Americas  |Northern America |Country           |  9510743.74| 318622525| 78.84146| 51921.985|MULTIPOLYGON (((-171.7317 6... |\n|KZ     |Kazakhstan     |Asia          |Asia      |Central Asia     |Sovereign country |  2729810.51|  17288285| 71.62000| 23587.338|MULTIPOLYGON (((87.35997 49... |\n\n</div>\n:::\n:::\n\n\nEl contenido de esta columna geom es la que confiere a los objetos sf sus poderes **espaciales**: `world$geom` es una \"columna lista\" de la clase sfc que contiene todas las coordenadas de los polígonos de los países. Los objetos sf pueden visualizarse rápidamente con la función `plot()`\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(world)\n```\n\n::: {.cell-output-display}\n![](datos_espaciales_en_R_files/figure-html/unnamed-chunk-4-1.png){width=672}\n:::\n:::\n\nPodemos obtener info de los atributos (columnas) de los objetos sf, como se hace \ncon cualquier data.frame:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary(world[\"lifeExp\"])\n##     lifeExp                 geom    \n##  Min.   :50.62   MULTIPOLYGON :177  \n##  1st Qu.:64.96   epsg:4326    :  0  \n##  Median :72.87   +proj=long...:  0  \n##  Mean   :70.85                      \n##  3rd Qu.:76.78                      \n##  Max.   :83.59                      \n##  NA's   :10\n```\n:::\n\n\nLos objetos sf son fáciles de subdividir. Por ejemplo, podemos recortar sólo las \ndos primeras filas y las tres primeras columnas del objeto world.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nworld_mini = world[1:2, 1:3]\nplot(world_mini)\n```\n\n::: {.cell-output-display}\n![](datos_espaciales_en_R_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n:::\n\n\nTambién podemos subdividir por columnas únicamente, ya sea con su índice o el\nnombre \n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(world[3:6])\n```\n\n::: {.cell-output-display}\n![](datos_espaciales_en_R_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n\n```{.r .cell-code}\nplot(world[\"pop\"])\n```\n\n::: {.cell-output-display}\n![](datos_espaciales_en_R_files/figure-html/unnamed-chunk-7-2.png){width=672}\n:::\n:::\n\n\nPodemos hacer selecciones\n\n\n::: {.cell}\n\n```{.r .cell-code}\nworld_asia = world[world$continent == \"Asia\", ]\nasia = st_union(world_asia)\n```\n:::\n\n\ny añadir capas a las imágenes existentes estableciendo add = TRUE\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(world[\"pop\"], reset = FALSE)\nplot(asia, col = \"red\", add = TRUE)\n```\n\n::: {.cell-output-display}\n![](datos_espaciales_en_R_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n:::\n\n\nHay varias formas de modificar los mapas con el método plot() de sf. Por ejemplo,\nse pueden superponer círculos, cuyos diámetros (fijados con cex =) representan \npoblaciones de países, en un mapa del mundo.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(world[\"continent\"], reset = FALSE)\ncex = sqrt(world$pop) / 10000\nworld_cents = st_centroid(world, of_largest = TRUE)\nplot(st_geometry(world_cents), add = TRUE, cex = cex)\n```\n\n::: {.cell-output-display}\n![](datos_espaciales_en_R_files/figure-html/unnamed-chunk-10-1.png){width=672}\n:::\n:::\n\n\n### Tipos de geometías\n\nLas geometrías son los componentes básicos de los objetos sf y pueden adoptar uno \nde los 18 tipos de geometría que admite el paquete sf. Los siete tipos más \nutilizados son: PUNTO, LINESTRING, POLYGON, MULTIPOINT, MULTILINESTRING, \nMULTIPOLYGON y GEOMETRYCOLLECTION. \n\nPor lo general, el usuario se ahorra la tediosa tarea de crear geometrías por su\ncuenta, ya que puede simplemente importar un archivo espacial ya existente. \nSin embargo, existe un conjunto de funciones para crear objetos geométricos de características simples (sfg) desde cero si es necesario. Los nombres de estas funciones son \nsencillos, todas comienzan con el prefijo `st_` y terminan con el nombre del tipo \nde geometría:\n\n- Un punto: `st_point()`\n- Una cadena de líneas: `st_linestring()`\n- Un polígono: `st_polygon()`\n- Un multipunto: `st_multipoint()`\n- Una multilínea: `st_multilínea()`\n- Un multipolígono: `st_multipolygon()`\n- Una colección de geometrías: `st_geometrycollection()`\n\nLos objetos sfg pueden crearse a partir de tres tipos de datos R básicos:\n\n- Un vector numérico: un único punto\n- Una matriz: un conjunto de puntos, donde cada fila representa un punto, un multipunto o una cadena de líneas\n- Una lista: una colección de objetos como matrices, multilíneas o colecciones de geometría.\n\n\n## Datos raster\n\nEl modelo de datos espaciales ráster representa el mundo con la cuadrícula \ncontinua de celdas (a menudo también llamadas píxeles). Este modelo de datos se \nrefiere a menudo a las denominadas cuadrículas regulares, en las que cada celda \ntiene el mismo tamaño constante. \n\nEl modelo de datos ráster suele constar de una cabecera ráster y una matriz (con\nfilas y columnas) que representa celdas equidistantes (a menudo también denominadas\npíxeles). La cabecera ráster define el sistema de referencia de coordenadas, la \nextensión y el origen. El origen (o punto de partida) suele ser la coordenada de \nla esquina inferior izquierda de la matriz (el paquete terra, sin embargo, \nutiliza por defecto la esquina superior izquierda). La cabecera define la extensión \nmediante el número de columnas, el número de filas y la resolución del tamaño de \nlas celdas. De este modo, partiendo del origen, podemos acceder fácilmente a \ncada celda y modificarla, ya sea utilizando el ID de una celda o\nespecificando explícitamente las filas y columnas. Esta representación matricial\nevita almacenar explícitamente las coordenadas de los cuatro puntos de esquina \n(de hecho, sólo almacena una coordenada, el origen) de cada esquina de celda, \ncomo ocurriría en el caso de los polígonos vectoriales rectangulares. \nSin embargo, a diferencia de los datos vectoriales, la celda de una capa raster\nsólo puede contener un único valor. El valor puede ser numérico o categórico.\n\n![](https://r.geocompx.org/02-spatial-data_files/figure-html/raster-intro-plot-1.png)\n\nLos mapas raster suelen representar fenómenos continuos como la elevación, la temperatura, la densidad de población o datos espectrales. En el modelo de datos raster también pueden representarse características discretas, como clases de suelo o de cubierta terrestre.\n\n![](https://r.geocompx.org/02-spatial-data_files/figure-html/raster-intro-plot2-1.png)\n\n### Paquetes de R para trabajar con datos ráster\n\nEn las dos últimas décadas, se han desarrollado varios paquetes para leer y \nprocesar conjuntos de datos raster. El principal de ellos fue raster, que supuso\nun cambio radical en las capacidades raster de R cuando se lanzó en 2010 y se \nconvirtió en el principal paquete en este ámbito hasta el desarrollo de terra y \nstars. Estos últimos, desarrollados más recientemente, ofrecen funciones potentes\ny eficaces para trabajar con conjuntos de datos ráster, y existe un solapamiento\nsustancial entre sus posibles casos de uso. Aquí nos vamos a centrar en el paquete\nterra.\n\n#### Introducción a terra\n\nEl paquete terra soporta objetos raster en R. Al igual que su predecesor raster (creado por el mismo desarrollador, Robert Hijmans), proporciona un amplio conjunto de funciones para crear, leer, exportar, manipular y procesar conjuntos de datos raster. La funcionalidad de terra es en gran medida la misma que la del paquete raster, pero hay algunas diferencias: las funciones de terra suelen ser más eficientes computacionalmente. Puede traducir sin problemas entre los dos tipos de objetos para garantizar la compatibilidad con scripts y paquetes más antiguos, por ejemplo, con las funciones raster(), stack() y brick() en el paquete raster.\n\nAdemás de las funciones para la manipulación de datos ráster, terra proporciona muchas funciones de bajo nivel que pueden constituir una base para el desarrollo de nuevas herramientas para trabajar con conjuntos de datos ráster. terra también le permite trabajar con grandes conjuntos de datos ráster que son demasiado grandes para caber en la memoria principal. En este caso, terra ofrece la posibilidad de dividir el raster en trozos más pequeños, y procesarlos iterativamente en lugar de cargar todo el archivo raster en la RAM.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nraster_filepath = system.file(\"raster/srtm.tif\", package = \"spDataLarge\")\nmy_rast = rast(raster_filepath)\nclass(my_rast)\n## [1] \"SpatRaster\"\n## attr(,\"package\")\n## [1] \"terra\"\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nmy_rast\n## class       : SpatRaster \n## dimensions  : 457, 465, 1  (nrow, ncol, nlyr)\n## resolution  : 0.0008333333, 0.0008333333  (x, y)\n## extent      : -113.2396, -112.8521, 37.13208, 37.51292  (xmin, xmax, ymin, ymax)\n## coord. ref. : lon/lat WGS 84 (EPSG:4326) \n## source      : srtm.tif \n## name        : srtm \n## min value   : 1024 \n## max value   : 2892\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(my_rast)\n```\n\n::: {.cell-output-display}\n![](datos_espaciales_en_R_files/figure-html/unnamed-chunk-13-1.png){width=672}\n:::\n:::\n\n\nClases de datos raster\n\nEl paquete terra soporta numerosos controladores con la ayuda de la biblioteca GDAL. \nPor lo general, los rásters de los archivos no se leen completamente en la RAM,\na excepción de su cabecera y un puntero al archivo.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsingle_raster_file = system.file(\"raster/srtm.tif\", package = \"spDataLarge\")\nsingle_rast = rast(raster_filepath)\nsingle_rast\n## class       : SpatRaster \n## dimensions  : 457, 465, 1  (nrow, ncol, nlyr)\n## resolution  : 0.0008333333, 0.0008333333  (x, y)\n## extent      : -113.2396, -112.8521, 37.13208, 37.51292  (xmin, xmax, ymin, ymax)\n## coord. ref. : lon/lat WGS 84 (EPSG:4326) \n## source      : srtm.tif \n## name        : srtm \n## min value   : 1024 \n## max value   : 2892\n```\n:::\n\n\nLos rásters también pueden crearse desde cero utilizando la misma función rast(). \n\n\n::: {.cell}\n\n```{.r .cell-code}\nnew_raster = rast(nrows = 6, ncols = 6, \n                  xmin = -1.5, xmax = 1.5, ymin = -1.5, ymax = 1.5,\n                  vals = 1:36)\nplot(new_raster)\n```\n\n::: {.cell-output-display}\n![](datos_espaciales_en_R_files/figure-html/unnamed-chunk-15-1.png){width=672}\n:::\n:::\n\n\nLa clase `SpatRaster` también puede manejar múltiples capas, por ejemplo,\nlas bandas de un satélite multiespectral o una serie temporal de rásters.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmulti_raster_file = system.file(\"raster/landsat.tif\", package = \"spDataLarge\")\nmulti_rast = rast(multi_raster_file)\nmulti_rast\n## class       : SpatRaster \n## dimensions  : 1428, 1128, 4  (nrow, ncol, nlyr)\n## resolution  : 30, 30  (x, y)\n## extent      : 301905, 335745, 4111245, 4154085  (xmin, xmax, ymin, ymax)\n## coord. ref. : WGS 84 / UTM zone 12N (EPSG:32612) \n## source      : landsat.tif \n## names       : landsat_1, landsat_2, landsat_3, landsat_4 \n## min values  :      7550,      6404,      5678,      5252 \n## max values  :     19071,     22051,     25780,     31961\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nnlyr(multi_rast)\n## [1] 4\n```\n:::\n\nLos rásters multicapa se pueden subdividir con el índice o el nombre de las capas\ndeseadas:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmulti_rast3 = subset(multi_rast, 3)\nmulti_rast4 = subset(multi_rast, \"landsat_4\")\n```\n:::\n\n\nSe pueden combinar o concatenar con la función `c()`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmulti_rast34 = c(multi_rast3, multi_rast4)\nplot(multi_rast34)\n```\n\n::: {.cell-output-display}\n![](datos_espaciales_en_R_files/figure-html/unnamed-chunk-19-1.png){width=672}\n:::\n:::\n",
    "supporting": [
      "datos_espaciales_en_R_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}